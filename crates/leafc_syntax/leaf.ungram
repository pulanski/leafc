// Leaf Un-Grammar.
//
// This grammar specifies the structure of Leaf's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

//*************************//
// Names, Paths and Macros //
//*************************//

Name =
  'ident' | 'self'

NameRef =
  'ident' | 'self' | 'super' | 'pkg' | 'Self'
//   'ident' | 'int_number' | 'self' | 'super' | 'crate' | 'Self'

Path =
  (qualifier:Path '::')? segment:PathSegment

PathSegment =
  '::'? NameRef
// | NameRef GenericArgList?
// | NameRef ParamList RetType?
// | '<' PathType ('as' PathType)? '>'

TokenTree =
  '(' ')'
| '{' '}'
| '[' ']'

//////////////////////////////////////////////////////////////////////////////////////////////////////////

Attr =
  '#' '!'? '[' Meta ']'

Meta =
  Path TokenTree?
//   Path ('=' Expr | TokenTree)?

//****************************//
// Statements and Expressions //
//****************************//

// Stmt =
//   ';'
// | ExprStmt
// | Item
// | LetStmt

// ExprStmt =
//   Expr ';'?

// Expr =
//   ArrayExpr
// | AwaitExpr
// | BinExpr
// | BlockExpr
// | BoxExpr
// | BreakExpr
// | CallExpr
// | CastExpr
// | ClosureExpr
// | ContinueExpr
// | FieldExpr
// | ForExpr
// | IfExpr
// | IndexExpr
// | Literal
// | LoopExpr
// | MacroExpr
// | MatchExpr
// | MethodCallExpr
// | ParenExpr
// | PathExpr
// | PrefixExpr
// | RangeExpr
// | RecordExpr
// | RefExpr
// | ReturnExpr
// | TryExpr
// | TupleExpr
// | WhileExpr
// | YieldExpr
// | YeetExpr
// | LetExpr
// | UnderscoreExpr

//*************************//
//          Types          //
//*************************//

// Type =
//   ArrayType
// | DynTraitType
// | FnPtrType
// | ForType
// | ImplTraitType
// | InferType
// | MacroType
// | NeverType
// | ParenType
// | PathType
// | PtrType
// | RefType
// | SliceType
// | TupleType

// ArrayType =
//   '[' Type ';' Expr ']'
