.tok a
/// abc
abkjsadf 
.tok
abkjsadf 
.tok abc
abkjsadf 
/// abc
asdf ads fa sdf asdf
'
asdf asdf
.tok
asdf 
asdf lksadf 
.tok asdbf
asdf
jlasdkjf 
.tok adsf
.tok
asdf
.tok
asdbfk sadf 
.tok
asdf
fn main() -> Result<Foo> {
true
.tok
true
TRUE
True
asdf sadf 
sadf sadf
fn main() {
.tok
진실
true
Vrai
.tok
true
.tok
Vrai
vrai
war
waar
c'est vrai
cest vrai
?
vrai
.tok
vrai
faux
Faux
cest faux
         ac
.tok
asdf
'a'
'🦀'
'\uDFFF'
.tok
ad
.tok
asdf
.tok
asdf
asdfjl;dsjf asdf
.tok .ast
abfsadf asdf
.tok
abc
'_
'a
'_a
'_a asdf
fn main(argc: i32, argv: Vec<String>) {
.tok
+=
-=
+
- abc
.tok abc
.tok
abc
.tok
abc
.tok
abc
.tok
cargo run
.tok
fn main(argc: i32, argv: Vec<String>) {
.tok
fn main(argc: i32, argv: Vec<String>) {
.tok
fn main(argc: i32, argv: Vec<String>) {
.tok
fn main(argc: i32, argv: Vec<String>) {
⁺⁰ᵇ¹⁰¹·⁰¹
.tok
⁺⁰ᵇ¹⁰¹·⁰¹
